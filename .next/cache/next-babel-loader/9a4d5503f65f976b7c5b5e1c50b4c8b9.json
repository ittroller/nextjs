{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/hocs/withLocale.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { NextPage } from 'next';\nimport Error from 'next/error';\nimport { getDisplayName } from 'next/dist/next-server/lib/utils';\nimport { isLocale } from '../config/i18n/types';\nimport { LocaleProvider } from '../context/LocaleContext';\nimport { get } from 'lodash';\n\nvar withLocale = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(WrappedPage) {\n    var WithLocale;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            WithLocale = function WithLocale(_ref2) {\n              var locale = _ref2.locale,\n                  pageProps = _objectWithoutProperties(_ref2, [\"locale\"]);\n\n              console.log(locale);\n\n              if (!locale) {\n                return /*#__PURE__*/_jsxDEV(Error, {\n                  statusCode: 404\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 13,\n                  columnNumber: 14\n                }, _this);\n              }\n\n              return /*#__PURE__*/_jsxDEV(LocaleProvider, {\n                lang: locale,\n                children: /*#__PURE__*/_jsxDEV(WrappedPage, _objectSpread({}, pageProps), void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 17,\n                  columnNumber: 9\n                }, _this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 16,\n                columnNumber: 7\n              }, _this);\n            };\n\n            WithLocale.getInitialProps = /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n                var pageProps, lang;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        pageProps = {};\n\n                        if (!WrappedPage.getInitialProps) {\n                          _context.next = 5;\n                          break;\n                        }\n\n                        _context.next = 4;\n                        return WrappedPage.getInitialProps(ctx);\n\n                      case 4:\n                        pageProps = _context.sent;\n\n                      case 5:\n                        _context.next = 7;\n                        return get(ctx, 'query.lang', {});\n\n                      case 7:\n                        lang = _context.sent;\n\n                        if (!lang) {\n                          _context.next = 14;\n                          break;\n                        }\n\n                        console.log(123, lang);\n\n                        if (!(typeof lang !== 'string' || !isLocale(lang))) {\n                          _context.next = 12;\n                          break;\n                        }\n\n                        return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                          locale: undefined\n                        }));\n\n                      case 12:\n                        console.log(456);\n                        return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                          locale: lang\n                        }));\n\n                      case 14:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            WithLocale.displayName = \"withLang(\".concat(getDisplayName(WrappedPage), \")\");\n            return _context2.abrupt(\"return\", WithLocale);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function withLocale(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default withLocale;","map":{"version":3,"sources":["/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/hocs/withLocale.js"],"names":["React","NextPage","Error","getDisplayName","isLocale","LocaleProvider","get","withLocale","WrappedPage","WithLocale","locale","pageProps","console","log","getInitialProps","ctx","lang","undefined","displayName"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,MAAzB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,GAAT,QAAoB,QAApB;;AAEA,IAAMC,UAAU;AAAA,sEAAG,kBAAMC,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,UADW,GACE,SAAbA,UAAa,QAA8B;AAAA,kBAA3BC,MAA2B,SAA3BA,MAA2B;AAAA,kBAAhBC,SAAgB;;AAC/CC,cAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;;AACA,kBAAI,CAACA,MAAL,EAAa;AACX,oCAAO,QAAC,KAAD;AAAO,kBAAA,UAAU,EAAE;AAAnB;AAAA;AAAA;AAAA;AAAA,yBAAP;AACD;;AACD,kCACE,QAAC,cAAD;AAAgB,gBAAA,IAAI,EAAEA,MAAtB;AAAA,uCACE,QAAC,WAAD,oBAAiBC,SAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,uBADF;AAKD,aAXgB;;AAajBF,YAAAA,UAAU,CAACK,eAAX;AAAA,mFAA6B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBJ,wBAAAA,SADuB,GACX,EADW;;AAAA,6BAEvBH,WAAW,CAACM,eAFW;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAGPN,WAAW,CAACM,eAAZ,CAA4BC,GAA5B,CAHO;;AAAA;AAGzBJ,wBAAAA,SAHyB;;AAAA;AAAA;AAAA,+BAKRL,GAAG,CAACS,GAAD,EAAM,YAAN,EAAoB,EAApB,CALK;;AAAA;AAKrBC,wBAAAA,IALqB;;AAAA,6BAMvBA,IANuB;AAAA;AAAA;AAAA;;AAOzBJ,wBAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBG,IAAjB;;AAPyB,8BAQrB,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,CAACZ,QAAQ,CAACY,IAAD,CARhB;AAAA;AAAA;AAAA;;AAAA,yFASXL,SATW;AASAD,0BAAAA,MAAM,EAAEO;AATR;;AAAA;AAWzBL,wBAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AAXyB,yFAYbF,SAZa;AAYFD,0BAAAA,MAAM,EAAEM;AAZN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA7B;;AAAA;AAAA;AAAA;AAAA;;AAgBAP,YAAAA,UAAU,CAACS,WAAX,sBAAqCf,cAAc,CAACK,WAAD,CAAnD;AA7BiB,8CA+BVC,UA/BU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVF,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAkCA,eAAeA,UAAf","sourcesContent":["import React from 'react';\nimport { NextPage } from 'next';\nimport Error from 'next/error';\nimport { getDisplayName } from 'next/dist/next-server/lib/utils';\nimport { isLocale } from '../config/i18n/types';\nimport { LocaleProvider } from '../context/LocaleContext';\nimport { get } from 'lodash';\n\nconst withLocale = async WrappedPage => {\n  const WithLocale = ({ locale, ...pageProps }) => {\n    console.log(locale);\n    if (!locale) {\n      return <Error statusCode={404} />;\n    }\n    return (\n      <LocaleProvider lang={locale}>\n        <WrappedPage {...pageProps} />\n      </LocaleProvider>\n    );\n  };\n\n  WithLocale.getInitialProps = async ctx => {\n    let pageProps = {};\n    if (WrappedPage.getInitialProps) {\n      pageProps = await WrappedPage.getInitialProps(ctx);\n    }\n    const lang = await get(ctx, 'query.lang', {});\n    if (lang) {\n      console.log(123, lang);\n      if (typeof lang !== 'string' || !isLocale(lang)) {\n        return { ...pageProps, locale: undefined };\n      }\n      console.log(456);\n      return { ...pageProps, locale: lang }; //\n    }\n  };\n\n  WithLocale.displayName = `withLang(${getDisplayName(WrappedPage)})`;\n\n  return WithLocale;\n};\n\nexport default withLocale;\n"]},"metadata":{},"sourceType":"module"}