{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/hocs/withLocale.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Error from 'next/error';\nimport { getDisplayName } from 'next/dist/next-server/lib/utils';\nimport { isLocale } from '../config/i18n/type';\nimport { LocaleProvider } from '../context/LocaleContext';\nexport default WrappedPage = function (_WrappedPage) {\n  function WrappedPage() {\n    return _WrappedPage.apply(this, arguments);\n  }\n\n  WrappedPage.toString = function () {\n    return _WrappedPage.toString();\n  };\n\n  return WrappedPage;\n}(function () {\n  var WithLocale = function WithLocale(_ref) {\n    var locale = _ref.locale,\n        pageProps = _objectWithoutProperties(_ref, [\"locale\"]);\n\n    if (!locale) {\n      return /*#__PURE__*/_jsxDEV(Error, {\n        statusCode: 404\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 14\n      }, _this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(LocaleProvider, {\n      lang: locale,\n      children: /*#__PURE__*/_jsxDEV(WrappedPage, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, _this);\n  };\n\n  WithLocale.getInitialProps = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n      var pageProps;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pageProps = {};\n\n              if (!WrappedPage().getInitialProps) {\n                _context.next = 5;\n                break;\n              }\n\n              _context.next = 4;\n              return WrappedPage().getInitialProps(ctx);\n\n            case 4:\n              pageProps = _context.sent;\n\n            case 5:\n              if (!(typeof ctx.query.lang !== 'string' || !isLocale(ctx.query.lang))) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                locale: undefined\n              }));\n\n            case 7:\n              return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, pageProps), {}, {\n                locale: ctx.query.lang\n              }));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  WithLocale.displayName = \"withLang(\".concat(getDisplayName(WrappedPage), \")\");\n  return WithLocale;\n});","map":{"version":3,"sources":["/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/hocs/withLocale.js"],"names":["React","Error","getDisplayName","isLocale","LocaleProvider","WrappedPage","WithLocale","locale","pageProps","getInitialProps","ctx","query","lang","undefined","displayName"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAASC,cAAT,QAA+B,iCAA/B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,eAAeC,WAAW;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAG,YAAM;AACjC,MAAMC,UAAU,GAAG,SAAbA,UAAa,OAA8B;AAAA,QAA3BC,MAA2B,QAA3BA,MAA2B;AAAA,QAAhBC,SAAgB;;AAC/C,QAAI,CAACD,MAAL,EAAa;AACX,0BAAO,QAAC,KAAD;AAAO,QAAA,UAAU,EAAE;AAAnB;AAAA;AAAA;AAAA;AAAA,eAAP;AACD;;AACD,wBACE,QAAC,cAAD;AAAgB,MAAA,IAAI,EAAEA,MAAtB;AAAA,6BACE,QAAC,WAAD,oBAAiBC,SAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,aADF;AAKD,GATD;;AAWAF,EAAAA,UAAU,CAACG,eAAX;AAAA,yEAA6B,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBF,cAAAA,SADuB,GACX,EADW;;AAAA,mBAEvBH,WAAW,GAAGI,eAFS;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGPJ,WAAW,GAAGI,eAAd,CAA8BC,GAA9B,CAHO;;AAAA;AAGzBF,cAAAA,SAHyB;;AAAA;AAAA,oBAKvB,OAAOE,GAAG,CAACC,KAAJ,CAAUC,IAAjB,KAA0B,QAA1B,IAAsC,CAACT,QAAQ,CAACO,GAAG,CAACC,KAAJ,CAAUC,IAAX,CALxB;AAAA;AAAA;AAAA;;AAAA,+EAMbJ,SANa;AAMFD,gBAAAA,MAAM,EAAEM;AANN;;AAAA;AAAA,+EAQfL,SARe;AAQJD,gBAAAA,MAAM,EAAEG,GAAG,CAACC,KAAJ,CAAUC;AARd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;;AAAA;AAAA;AAAA;AAAA;;AAWAN,EAAAA,UAAU,CAACQ,WAAX,sBAAqCZ,cAAc,CAACG,WAAD,CAAnD;AAEA,SAAOC,UAAP;AACD,CA1ByB,CAA1B","sourcesContent":["import React from 'react';\nimport Error from 'next/error';\nimport { getDisplayName } from 'next/dist/next-server/lib/utils';\nimport { isLocale } from '../config/i18n/type';\nimport { LocaleProvider } from '../context/LocaleContext';\n\nexport default WrappedPage = () => {\n  const WithLocale = ({ locale, ...pageProps }) => {\n    if (!locale) {\n      return <Error statusCode={404} />;\n    }\n    return (\n      <LocaleProvider lang={locale}>\n        <WrappedPage {...pageProps} />\n      </LocaleProvider>\n    );\n  };\n\n  WithLocale.getInitialProps = async ctx => {\n    let pageProps = {};\n    if (WrappedPage().getInitialProps) {\n      pageProps = await WrappedPage().getInitialProps(ctx);\n    }\n    if (typeof ctx.query.lang !== 'string' || !isLocale(ctx.query.lang)) {\n      return { ...pageProps, locale: undefined };\n    }\n    return { ...pageProps, locale: ctx.query.lang };\n  };\n\n  WithLocale.displayName = `withLang(${getDisplayName(WrappedPage)})`;\n\n  return WithLocale;\n};\n"]},"metadata":{},"sourceType":"module"}