{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/context/LocaleContext.js\";\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { isLocale } from '../config/i18n/types';\nexport const LocaleContext = /*#__PURE__*/React.createContext({\n  locale: 'en',\n  setLocale: () => null\n});\nexport const LocaleProvider = ({\n  lang,\n  children\n}) => {\n  const [locale, setLocale] = React.useState(lang);\n  const {\n    query\n  } = useRouter();\n  React.useEffect(() => {\n    console.log(locale);\n\n    if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', locale);\n    }\n  }, [locale]);\n  React.useEffect(() => {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n      setLocale(query.lang);\n    }\n  }, [query.lang, locale]);\n  return /*#__PURE__*/_jsxDEV(LocaleContext.Provider, {\n    value: {\n      locale,\n      setLocale\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/context/LocaleContext.js"],"names":["React","useRouter","isLocale","LocaleContext","createContext","locale","setLocale","LocaleProvider","lang","children","useState","query","useEffect","console","log","localStorage","getItem","setItem"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,OAAO,MAAMC,aAAa,gBAAGH,KAAK,CAACI,aAAN,CAAoB;AAC/CC,EAAAA,MAAM,EAAE,IADuC;AAE/CC,EAAAA,SAAS,EAAE,MAAM;AAF8B,CAApB,CAAtB;AAKP,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AACpD,QAAM,CAACJ,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACU,QAAN,CAAeF,IAAf,CAA5B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAYV,SAAS,EAA3B;AAEAD,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;;AACA,QAAIA,MAAM,KAAKU,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,EAA+C;AAC7CD,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BZ,MAA/B;AACD;AACF,GALD,EAKG,CAACA,MAAD,CALH;AAOAL,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB,QAAI,OAAOD,KAAK,CAACH,IAAb,KAAsB,QAAtB,IAAkCN,QAAQ,CAACS,KAAK,CAACH,IAAP,CAA1C,IAA0DH,MAAM,KAAKM,KAAK,CAACH,IAA/E,EAAqF;AACnFF,MAAAA,SAAS,CAACK,KAAK,CAACH,IAAP,CAAT;AACD;AACF,GAJD,EAIG,CAACG,KAAK,CAACH,IAAP,EAAaH,MAAb,CAJH;AAMA,sBAAO,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA/B;AAAA,cAAuDG;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBM","sourcesContent":["import React from 'react';\nimport { useRouter } from 'next/router';\nimport { isLocale } from '../config/i18n/types';\n\nexport const LocaleContext = React.createContext({\n  locale: 'en',\n  setLocale: () => null,\n});\n\nexport const LocaleProvider = ({ lang, children }) => {\n  const [locale, setLocale] = React.useState(lang);\n  const { query } = useRouter();\n\n  React.useEffect(() => {\n    console.log(locale);\n    if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', locale);\n    }\n  }, [locale]);\n\n  React.useEffect(() => {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n      setLocale(query.lang);\n    }\n  }, [query.lang, locale]);\n\n  return <LocaleContext.Provider value={{ locale, setLocale }}>{children}</LocaleContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}