{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/context/LocaleContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { isLocale } from '../config/i18n/type';\nexport const LocaleContext = /*#__PURE__*/createContext({\n  locale: 'en',\n  setLocale: () => null\n});\nexport const LocaleProvider = ({\n  lang,\n  children\n}) => {\n  const {\n    0: locale,\n    1: setLocale\n  } = useState(lang);\n  const {\n    query\n  } = useRouter();\n  useEffect(() => {\n    if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', locale);\n    }\n  }, [locale]);\n  useEffect(() => {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n      setLocale(query.lang);\n    }\n\n    console.log(123);\n  }, [query.lang, locale]);\n  return /*#__PURE__*/_jsxDEV(LocaleContext.Provider, {\n    value: {\n      locale,\n      setLocale\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["/Users/caokhaminh/Documents/MY_SOURCE/REACTJS/next-demo/context/LocaleContext.js"],"names":["React","createContext","useState","useEffect","useRouter","isLocale","LocaleContext","locale","setLocale","LocaleProvider","lang","children","query","localStorage","getItem","setItem","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAO,MAAMC,aAAa,gBAAGL,aAAa,CAAC;AACzCM,EAAAA,MAAM,EAAE,IADiC;AAEzCC,EAAAA,SAAS,EAAE,MAAM;AAFwB,CAAD,CAAnC;AAKP,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAwB;AACpD,QAAM;AAAA,OAACJ,MAAD;AAAA,OAASC;AAAT,MAAsBN,QAAQ,CAACQ,IAAD,CAApC;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAYR,SAAS,EAA3B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,MAAM,KAAKM,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,EAA+C;AAC7CD,MAAAA,YAAY,CAACE,OAAb,CAAqB,QAArB,EAA+BR,MAA/B;AACD;AACF,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOS,KAAK,CAACF,IAAb,KAAsB,QAAtB,IAAkCL,QAAQ,CAACO,KAAK,CAACF,IAAP,CAA1C,IAA0DH,MAAM,KAAKK,KAAK,CAACF,IAA/E,EAAqF;AACnFF,MAAAA,SAAS,CAACI,KAAK,CAACF,IAAP,CAAT;AACD;;AACDM,IAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACD,GALQ,EAKN,CAACL,KAAK,CAACF,IAAP,EAAaH,MAAb,CALM,CAAT;AAOA,sBAAO,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA/B;AAAA,cAAuDG;AAAvD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBM","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { isLocale } from '../config/i18n/type';\n\nexport const LocaleContext = createContext({\n  locale: 'en',\n  setLocale: () => null,\n});\n\nexport const LocaleProvider = ({ lang, children }) => {\n  const [locale, setLocale] = useState(lang);\n  const { query } = useRouter();\n\n  useEffect(() => {\n    if (locale !== localStorage.getItem('locale')) {\n      localStorage.setItem('locale', locale);\n    }\n  }, [locale]);\n\n  useEffect(() => {\n    if (typeof query.lang === 'string' && isLocale(query.lang) && locale !== query.lang) {\n      setLocale(query.lang);\n    }\n    console.log(123);\n  }, [query.lang, locale]);\n\n  return <LocaleContext.Provider value={{ locale, setLocale }}>{children}</LocaleContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}